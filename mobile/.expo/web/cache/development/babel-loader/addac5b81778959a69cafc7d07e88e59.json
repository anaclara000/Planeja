{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Platform } from 'expo-modules-core';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var type = !asset.type ? '' : \".\" + asset.type;\n  return asset.httpServerLocation + '/' + asset.name + scaleSuffix + type;\n}\n\nvar AssetSourceResolver = function () {\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n\n    if (!serverUrl) {\n      throw new Error('Web assets require a server URL');\n    }\n\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = null;\n    this.asset = asset;\n  }\n\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return true;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return false;\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      return this.assetServerURL();\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      var fromUrl = new URL(getScaledAssetPath(this.asset), this.serverUrl);\n      fromUrl.searchParams.set('platform', Platform.OS);\n      fromUrl.searchParams.set('hash', this.asset.hash);\n      return this.fromSource(fromUrl.toString());\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      var _this$asset$width, _this$asset$height;\n\n      return {\n        __packager_asset: true,\n        width: (_this$asset$width = this.asset.width) != null ? _this$asset$width : undefined,\n        height: (_this$asset$height = this.asset.height) != null ? _this$asset$height : undefined,\n        uri: source,\n        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())\n      };\n    }\n  }], [{\n    key: \"pickScale\",\n    value: function pickScale(scales, deviceScale) {\n      for (var i = 0; i < scales.length; i++) {\n        if (scales[i] >= deviceScale) {\n          return scales[i];\n        }\n      }\n\n      return scales[scales.length - 1] || 1;\n    }\n  }]);\n\n  return AssetSourceResolver;\n}();\n\nexport { AssetSourceResolver as default };","map":{"version":3,"mappings":";;AAAA,SAASA,QAAT,QAAyB,mBAAzB;;;AAaA,SAASC,kBAAT,CAA4BC,KAA5B,EAAiC;EAC/B,IAAMC,KAAK,GAAGC,mBAAmB,CAACC,SAApB,CAA8BH,KAAK,CAACI,MAApC,EAA4CC,UAAU,CAACC,GAAX,EAA5C,CAAd;EACA,IAAMC,WAAW,GAAGN,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,MAAMA,KAAN,GAAc,GAArD;EACA,IAAMO,IAAI,GAAG,CAACR,KAAK,CAACQ,IAAP,GAAc,EAAd,SAAuBR,KAAK,CAACQ,IAA1C;EACA,OAAOR,KAAK,CAACS,kBAAN,GAA2B,GAA3B,GAAiCT,KAAK,CAACU,IAAvC,GAA8CH,WAA9C,GAA4DC,IAAnE;AACD;;IAEoBN,mB;EAQnB,6BACES,SADF,EAEEC,WAFF,EAGEZ,KAHF,EAGsB;IAAA;;IAEpB,IAAI,CAACW,SAAL,EAAgB;MACd,MAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;IACD;;IAED,KAAKF,SAAL,GAAiBA,SAAjB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKZ,KAAL,GAAaA,KAAb;EACD;;;;WAGD,8BAAkB;MAChB,OAAO,IAAP;IACD;;;WAGD,kCAAsB;MACpB,OAAO,KAAP;IACD;;;WAED,wBAAY;MACV,OAAO,KAAKc,cAAL,EAAP;IACD;;;WAKD,0BAAc;MACZ,IAAMC,OAAO,GAAG,IAAIC,GAAJ,CAAQjB,kBAAkB,CAAC,KAAKC,KAAN,CAA1B,EAAwC,KAAKW,SAA7C,CAAhB;MACAI,OAAO,CAACE,YAAR,CAAqBC,GAArB,CAAyB,UAAzB,EAAqCpB,QAAQ,CAACqB,EAA9C;MACAJ,OAAO,CAACE,YAAR,CAAqBC,GAArB,CAAyB,MAAzB,EAAiC,KAAKlB,KAAL,CAAWoB,IAA5C;MACA,OAAO,KAAKC,UAAL,CAAgBN,OAAO,CAACO,QAAR,EAAhB,CAAP;IACD;;;WAED,oBAAWC,MAAX,EAAyB;MAAA;;MACvB,OAAO;QACLC,gBAAgB,EAAE,IADb;QAELC,KAAK,uBAAE,KAAKzB,KAAL,CAAWyB,KAAb,gCAAsBC,SAFtB;QAGLC,MAAM,wBAAE,KAAK3B,KAAL,CAAW2B,MAAb,iCAAuBD,SAHxB;QAILE,GAAG,EAAEL,MAJA;QAKLtB,KAAK,EAAEC,mBAAmB,CAACC,SAApB,CAA8B,KAAKH,KAAL,CAAWI,MAAzC,EAAiDC,UAAU,CAACC,GAAX,EAAjD;MALF,CAAP;IAOD;;;WAED,mBAAiBF,MAAjB,EAAmCyB,WAAnC,EAAsD;MACpD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,MAAM,CAAC2B,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;QACtC,IAAI1B,MAAM,CAAC0B,CAAD,CAAN,IAAaD,WAAjB,EAA8B;UAC5B,OAAOzB,MAAM,CAAC0B,CAAD,CAAb;QACD;MACF;;MACD,OAAO1B,MAAM,CAACA,MAAM,CAAC2B,MAAP,GAAgB,CAAjB,CAAN,IAA6B,CAApC;IACD;;;;;;SA/DkB7B,mB","names":["Platform","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","PixelRatio","get","scaleSuffix","type","httpServerLocation","name","serverUrl","jsbundleUrl","Error","assetServerURL","fromUrl","URL","searchParams","set","OS","hash","fromSource","toString","source","__packager_asset","width","undefined","height","uri","deviceScale","i","length"],"sourceRoot":"","sources":["../src/AssetSourceResolver.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { PixelRatio } from 'react-native';\nimport { PackagerAsset } from 'react-native/Libraries/Image/AssetRegistry';\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\n// Returns the Metro dev server-specific asset location.\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const type = !asset.type ? '' : `.${asset.type}`;\n  return asset.httpServerLocation + '/' + asset.name + scaleSuffix + type;\n}\n\nexport default class AssetSourceResolver {\n  serverUrl: string;\n  // where the jsbundle is being run from\n  // NOTE(EvanBacon): Never defined on web.\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    if (!serverUrl) {\n      throw new Error('Web assets require a server URL');\n    }\n\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = null;\n    this.asset = asset;\n  }\n\n  // Always true for web runtimes\n  isLoadedFromServer(): boolean {\n    return true;\n  }\n\n  // Always false for web runtimes\n  isLoadedFromFileSystem(): boolean {\n    return false;\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    return this.assetServerURL();\n  }\n\n  /**\n   * @returns absolute remote URL for the hosted asset.\n   */\n  assetServerURL(): ResolvedAssetSource {\n    const fromUrl = new URL(getScaledAssetPath(this.asset), this.serverUrl);\n    fromUrl.searchParams.set('platform', Platform.OS);\n    fromUrl.searchParams.set('hash', this.asset.hash);\n    return this.fromSource(fromUrl.toString());\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width ?? undefined,\n      height: this.asset.height ?? undefined,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}