{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport { getFilename } from \"./AssetUris\";\nexport function isImageType(type) {\n  return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);\n}\nexport function getImageInfoAsync(url) {\n  if (!Platform.isDOMAvailable) {\n    return Promise.resolve({\n      name: getFilename(url),\n      width: 0,\n      height: 0\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.onerror = reject;\n\n    img.onload = function () {\n      resolve({\n        name: getFilename(url),\n        width: img.naturalWidth,\n        height: img.naturalHeight\n      });\n    };\n\n    img.src = url;\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,mBAAzB;AAEA,SAASC,WAAT;AAQA,OAAM,SAAUC,WAAV,CAAsBC,IAAtB,EAAkC;EACtC,OAAO,sCAAsCC,IAAtC,CAA2CD,IAA3C,CAAP;AACD;AAED,OAAM,SAAUE,iBAAV,CAA4BC,GAA5B,EAAuC;EAC3C,IAAI,CAACN,QAAQ,CAACO,cAAd,EAA8B;IAC5B,OAAOC,OAAO,CAACC,OAAR,CAAgB;MAAEC,IAAI,EAAET,WAAW,CAACK,GAAD,CAAnB;MAA0BK,KAAK,EAAE,CAAjC;MAAoCC,MAAM,EAAE;IAA5C,CAAhB,CAAP;EACD;;EACD,OAAO,IAAIJ,OAAJ,CAAY,UAACC,OAAD,EAAUI,MAAV,EAAoB;IACrC,IAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;IACAD,GAAG,CAACE,OAAJ,GAAcH,MAAd;;IACAC,GAAG,CAACG,MAAJ,GAAa,YAAK;MAChBR,OAAO,CAAC;QACNC,IAAI,EAAET,WAAW,CAACK,GAAD,CADX;QAENK,KAAK,EAAEG,GAAG,CAACI,YAFL;QAGNN,MAAM,EAAEE,GAAG,CAACK;MAHN,CAAD,CAAP;IAKD,CAND;;IAOAL,GAAG,CAACM,GAAJ,GAAUd,GAAV;EACD,CAXM,CAAP;AAYD","names":["Platform","getFilename","isImageType","type","test","getImageInfoAsync","url","isDOMAvailable","Promise","resolve","name","width","height","reject","img","Image","onerror","onload","naturalWidth","naturalHeight","src"],"sourceRoot":"","sources":["../src/ImageAssets.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\n\nimport { getFilename } from './AssetUris';\n\ntype ImageInfo = {\n  name: string;\n  width: number;\n  height: number;\n};\n\nexport function isImageType(type: string): boolean {\n  return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);\n}\n\nexport function getImageInfoAsync(url: string): Promise<ImageInfo> {\n  if (!Platform.isDOMAvailable) {\n    return Promise.resolve({ name: getFilename(url), width: 0, height: 0 });\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onerror = reject;\n    img.onload = () => {\n      resolve({\n        name: getFilename(url),\n        width: img.naturalWidth,\n        height: img.naturalHeight,\n      });\n    };\n    img.src = url;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}